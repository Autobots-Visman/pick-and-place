FROM nvidia/cuda:11.7.1-runtime-ubuntu20.04

# take the core ros image on top of the cuda focal image; this allows for gpu
# acceleration on gazebo
# https://github.com/osrf/docker_images/blob/master/ros/noetic/ubuntu/focal/ros-core/Dockerfile

ENV DEBIAN_FRONTEND noninteractive
ENV ROS_DISTRO noetic
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ros-noetic-ros-core=1.5.0-1* \
    python3-catkin-tools \
    python3-rosdep \
    && \
    apt clean

RUN apt update && \
    apt install -y --no-install-recommends \
    apt-utils \
    build-essential \
    git \
    python3-dev \
    python3-pip \
    python-is-python3 \
    libgl1-mesa-glx \
    libsm-dev \
    wget \
    && \
    apt clean

# pull any dependencies needed by the workspace. here's a command that might
# make it a bit easier to enumerate and paste, when run in a container that
# doesn't have any dependencies and the right packages in the workspace.
#
#   rosdep install --from-paths src --ignore-src -y --simulate | \
#   grep apt-get | tr -s " " | cut -d" " -f5 | \
#   xargs printf "%s \\ \n"
#
RUN apt update && \
    apt install -y --no-install-recommends \
    # dependencies we get from above
    ros-noetic-robot-state-publisher \
    ros-noetic-rviz \
    ros-noetic-joint-state-publisher \
    gazebo11 \
    ros-noetic-hardware-interface \
    ros-noetic-xacro \
    ros-noetic-moveit-ros-move-group \
    ros-noetic-moveit-fake-controller-manager \
    ros-noetic-moveit-simple-controller-manager \
    ros-noetic-moveit-kinematics \
    ros-noetic-moveit-planners-ompl \
    ros-noetic-moveit-ros-visualization \
    ros-noetic-cv-bridge \
    ros-noetic-ros-pytest \
    ros-noetic-control-msgs \
    python3-serial \
    ros-noetic-ros-control \
    ros-noetic-ros-controllers \
    ros-noetic-controller-manager \
    ros-noetic-joint-state-controller \
    ros-noetic-position-controllers \
    ros-noetic-joint-trajectory-controller \
    python-yaml \
    ros-noetic-gazebo-ros-control \
    ros-noetic-rqt-gui \
    ros-noetic-effort-controllers \
    libeigen3-dev \
    ros-noetic-image-transport \
    ros-noetic-tf \
    ros-noetic-ddynamic-reconfigure \
    ros-noetic-diagnostic-updater \
    ros-noetic-librealsense2 \
    ros-noetic-gazebo-ros \
    ros-noetic-camera-info-manager \
    ros-noetic-moveit-commander \
    # also include image_view for debugging, and usb_cam for a personal camera
    ros-noetic-image-view \
    ros-noetic-usb-cam \
    && \
    apt clean

RUN pip install --upgrade pip wheel cython

# install updated opengl; this should be okay on a linux host too
# https://answers.ros.org/question/394135/robot-meshes-not-visible-in-rviz-windows11-wsl2/
RUN apt update && \
    apt install -y --no-install-recommends \
    software-properties-common \
    && \
    add-apt-repository ppa:oibaf/graphics-drivers && \
    apt update && \
    apt install -y --no-install-recommends \
    mesa-utils \
    && \
    apt clean

WORKDIR /catkin_ws
RUN mkdir src
RUN cd src && \
    git clone https://github.com/ivaROS/ivaDynamixel.git && \
    git clone https://github.com/ivaROS/ivaHandy.git && \
    git clone --recurse-submodules https://github.com/rickstaa/realsense-ros-gazebo.git && \
    git clone https://github.com/ivalab/simData.git

# TODO: remove this once the gknet ros module is merged upstream
ADD vendor/GraspKpNet /catkin_ws/src/GraspKpNet

# TODO: remove this at some time
RUN cd /catkin_ws/src/simData && \
    git remote add acmiyaguchi https://github.com/acmiyaguchi/simData.git && \
    git fetch --all && \
    git checkout acmiyaguchi/physics

# add the current ros module and install the requirements
WORKDIR /catkin_ws/src/app
ADD requirements.txt requirements.txt
RUN pip install -r requirements.txt

ADD . ./

# build the workspace
WORKDIR /catkin_ws

RUN catkin config --init --extend /opt/ros/noetic && \
    rosdep init && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    catkin build

WORKDIR /catkin_ws/src/app
COPY ./docker/bin/ros_entrypoint.sh /
ENTRYPOINT ["/ros_entrypoint.sh",  "stdbuf", "-o", "L"]
# exit after starting
CMD ["true"]
